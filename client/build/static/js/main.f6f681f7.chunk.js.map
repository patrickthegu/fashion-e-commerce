{"version":3,"sources":["utils/helpers.js","utils/reducers.js","utils/actions.js","utils/GlobalState.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","components/Jumbotron/index.js","utils/mutations.js","pages/Success.js","pages/Detail.js","pages/NoMatch.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","components/Header/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js","assets/spinner.gif","assets/images/Logo.png"],"names":["idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","ProductItem","item","image","name","price","quantity","className","to","alt","src","QUERY_CHECKOUT","gql","QUERY_PRODUCTS","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","onClick","id","CartItem","placeholder","onChange","target","parseInt","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Jumbotron","children","style","height","clear","paddingTop","textAlign","LOGIN","ADD_ORDER","ADD_USER","Success","useMutation","addOrder","setTimeout","saveOrder","Detail","useParams","useState","currentProduct","setCurrentProduct","find","indexedProducts","description","itemInCart","cartItem","disabled","p","NoMatch","Login","email","password","formState","setFormState","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Header","logo","width","Footer","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.f6f681f7.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\n    request.onsuccess = function(e) {\n      // save a reference of the database to the `db` variable\n      db = request.result;\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      // save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      // if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      // when the transaction is complete, close the connection\n      tx.oncomplete = function() {\n        db.close();\n      };\n};\n\n  });\n}","import { useReducer } from 'react';\n\nimport {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from './actions';\n  \n  export const reducer = (state, action) => {\n    switch (action.type) {\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n      case UPDATE_PRODUCTS:\n        return {\n          ...state,\n          products: [...action.products]\n        };\n      // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n      case UPDATE_CATEGORIES:\n        return {\n          ...state,\n          categories: [...action.categories]\n        };\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n              ...state,\n              currentCategory: action.currentCategory\n            };\n        case ADD_TO_CART:\n            return {\n              ...state,\n              cartOpen: true,\n              cart: [...state.cart, action.product]\n            };\n        case ADD_MULTIPLE_TO_CART:\n            return {\n              ...state,\n              cart: [...state.cart, ...action.products],\n            };\n        case REMOVE_FROM_CART:\n            let newState = state.cart.filter(product => {\n              return product._id !== action._id;\n            });\n\n            return {\n              ...state,\n              cartOpen: newState.length > 0,\n              cart: newState\n            };\n        case UPDATE_CART_QUANTITY:\n            return {\n              ...state,\n              cartOpen: true,\n              cart: state.cart.map(product => {\n                if (action._id === product._id) {\n                  product.purchaseQuantity = action.purchaseQuantity;\n                }\n                return product;\n              })\n            };\n        case CLEAR_CART:\n            return {\n              ...state,\n              cartOpen: false,\n              cart: []\n            };\n        case TOGGLE_CART:\n            return {\n              ...state,\n              cartOpen: !state.cartOpen\n            };\n      default:\n        return state;\n    }\n  };\n\n  export function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n  }\n\n  ","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n\n// represents all the actions we want to perform with a shopping cart\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React, { createContext, useContext } from \"react\";\nimport { useProductReducer } from './reducers';\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useProductReducer({\n    products: [],\n    cart: [],\n    cartOpen: false,\n    categories: [],\n    currentCategory: ''\n  });\n    // use this to confirm it works!\n    console.log(state);\n    return <Provider value={[state, dispatch]} {...props} />;\n  };\n\n  const useStoreContext = () => {\n    return useContext(StoreContext);\n  };\n\n  export { StoreProvider, useStoreContext };","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  const [state, dispatch] = useStoreContext();\n\n  const { cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        {/* <p>{name}</p> */}\n      </Link>\n      <div>\n        {/* <div>{quantity} {pluralize(\"item\", quantity)} in stock</div> */}\n        <span>${price}</span>\n      </div>\n      {/* <button onClick={addToCart}>Add to cart</button> */}\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList({}) {\n\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  useEffect(() => {\n    if(data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\n    } else if (!loading) {\n      // since we're offline, get all of the data from the `products` store\n      idbPromise('products', 'get').then((products) => {\n        // use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n  \n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n  \n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return (\n    <div className=\"my-2\">\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\n\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\n\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu({}) {\n\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\n\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n\n  const [, dispatch] = useStoreContext();\n\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n  \n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n    \n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n    \n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }\n  };\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\nimport CartItem from '../CartItem';\n// REMOVE THE AUTH FOR PROJECTS WHERE NO NEED TO BE LOGGED IN TO CHECKOUT THE CART\nimport Auth from '../../utils/auth';\nimport './style.css';\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n\n    const [state, dispatch] = useStoreContext();\n\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n    useEffect(() => {\n      async function getCart() {\n        const cart = await idbPromise('cart', 'get');\n        dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n      };\n    \n      if (!state.cart.length) {\n        getCart();\n      }\n    }, [state.cart.length, dispatch]);\n\n    useEffect(() => {\n      if (data) {\n        stripePromise.then((res) => {\n          res.redirectToCheckout({ sessionId: data.checkout.session });\n        });\n      }\n    }, [data]);\n\n    function toggleCart() {\n      dispatch({ type: TOGGLE_CART });\n    }\n\n    function calculateTotal() {\n      let sum = 0;\n      state.cart.forEach(item => {\n        sum += item.price * item.purchaseQuantity;\n      });\n      return sum.toFixed(2);\n    }\n\n    function submitCheckout() {\n      const productIds = [];\n    \n      state.cart.forEach((item) => {\n        for (let i = 0; i < item.purchaseQuantity; i++) {\n          productIds.push(item._id);\n        }\n      });\n\n      getCheckout({\n        variables: { products: productIds }\n      });\n\n    }\n \n    if (!state.cartOpen) {\n        return (\n          <div className=\"cart-closed\" onClick={toggleCart}>\n            <span\n              role=\"img\"\n              aria-label=\"trash\">🛒</span>\n          </div>\n        );\n      }\n\n  return (\n    <div className=\"cart\">\n  <div className=\"close\" onClick={toggleCart}>[close]</div>\n  <h2>Shopping Cart</h2>\n  {state.cart.length ? (\n    <div>\n      {state.cart.map(item => (\n        <CartItem key={item._id} item={item} />\n      ))}\n      <div className=\"flex-row space-between\">\n        <strong>Total: ${calculateTotal()}</strong>\n        {\n          // REMOVE THE AUTH FOR PROJECTS WHERE NO NEED TO BE LOGGED IN TO CHECKOUT THE CART\n          Auth.loggedIn() ?\n          <button onClick={submitCheckout}>\n            Checkout\n          </button>\n            :\n            <span>(log in to check out)</span>\n        }\n      </div>\n    </div>\n  ) : (\n    <h3>\n      <span role=\"img\" aria-label=\"shocked\">\n        😱\n      </span>\n      You haven't added anything to your cart yet!\n    </h3>\n  )}\n</div>\n  );\n};\n\nexport default Cart;","import React, { useState } from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  \n  return (\n    <div className=\"container\">\n      <ProductList />\n\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useEffect } from \"react\";\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n\n    const [addOrder] = useMutation(ADD_ORDER);\n\n    useEffect(() => {\n      async function saveOrder() {\n    \n        const cart = await idbPromise('cart', 'get');\n        const products = cart.map(item => item._id);\n\n        if (products.length) {\n            const { data } = await addOrder({ variables: { products } });\n            const productData = data.addOrder.products;\n          \n            productData.forEach((item) => {\n              idbPromise('cart', 'delete', item);\n            });\n          }\n\n          setTimeout(() => {\n            window.location.assign('/');\n          }, 3000);\n        }    \n      \n      saveOrder();\n    }, [addOrder]);\n\n    return (\n      <div>\n        <Jumbotron>\n          <h1>Success!</h1>\n          <h2>\n            Thank you for your purchase!\n          </h2>\n          <h2>\n            You will now be redirected to the homepage\n          </h2>\n        </Jumbotron>\n      </div>\n    );\n  };\n  \n\n  export default Success;","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\n\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\n\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\n\nimport Cart from '../components/Cart';\n\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Return to Homepage</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to cart</button>\n            <button \n              disabled={!cart.find(p => p._id === currentProduct._id)} \n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\nimport CategoryMenu from \"../CategoryMenu\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <CategoryMenu />\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","// Logo and Cart\r\nimport React from \"react\";\r\nimport Auth from \"../../utils/auth\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from '../../assets/images/Logo.png'\r\nimport Cart from '../Cart';\r\n\r\nfunction Header() {\r\n\r\n  return (\r\n    <div className=\"flex-row px-1\">\r\n      <Link to={`/`}>\r\n        <img\r\n          src={logo}\r\n          alt=\"Logo\"\r\n          width=\"50px\"\r\n          height=\"50px\"\r\n        />\r\n      </Link>\r\n      <Cart />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","// terms and conditions\r\n\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Footer() {\r\n\r\n    return (\r\n        <ul className=\"flex-row\">\r\n          <li className=\"mx-1\">\r\n            <Link to=\"/Terms\">\r\n              2022 Terms and Conditions\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n    );\r\n\r\n}\r\n  \r\n\r\n  \r\n  export default Footer;\r\n  ","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Success from './pages/Success';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport { StoreProvider } from \"./utils/GlobalState\";\nimport OrderHistory from './pages/OrderHistory';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Header />\n            <Switch>\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n            <Nav />\n            <Footer />\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","module.exports = __webpack_public_path__ + \"static/media/Logo.1f646b65.png\";"],"sourceRoot":""}